#! /usr/bin/python
# -*- coding: utf-8 -*-
import os, sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../..') # Paracode root

from datetime import datetime, timedelta
from urlparse import urlparse
from ConfigParser import RawConfigParser
import socks
import httplib2
from taras.sql_agent import TarasSQLAgent
from util.log import _logger

class ProxyManager:
    def __init__(self, host, db_user = 'junyi', db_passwd = 'admin123', db_name = 'taras_qq'):
        self.agent = TarasSQLAgent(db_name, db_user, db_passwd, host = host)
        
        self.test_url_path = os.path.dirname(os.path.abspath(__file__)) + '/res/test-url.txt'
        self.update_db = False

    def _parse_url_file(self, filepath):
        result = []
        with open(filepath, 'r') as urlfile:
            urls = urlfile.read().split('\n')
            for url in urls:
                url = url.strip()
                if url and url[0] != '#':
                    result.append(url)
        return result


    def _test(self, addr, port, user, passwd, urls):
        sum = len(urls)
        ok_count = 0
        elapsed_sum = 0
        for url in urls:
            ok, elapsed = self._test_single_url(addr, port, user, passwd, url)
            if ok:
                ok_count += 1
                elapsed_sum += elapsed
        avg_elapsed = 0 if ok_count == 0 else float(elapsed_sum) / float(ok_count)
        _logger.debug("%d / %d OK, average time: %.2f" % (ok_count, sum, avg_elapsed))
        return float(ok_count) / float(sum), avg_elapsed

    def _test_single_url(self, addr, port, user, passwd, url = 'http://junyi-luan.com/dump.php'):
        try:
            begin = datetime.now()
            http = httplib2.Http(proxy_info = httplib2.ProxyInfo(socks.PROXY_TYPE_SOCKS5,
                                                                 addr, port,
                                                                 proxy_user = user,
                                                                 proxy_pass = passwd),
                                 timeout= 6)

            response, content =  http.request(url, 'GET')
            end = datetime.now()
        except Exception, err:
            _logger.error("exception:%s, type:(%s)" % (err, type(err)))
            dir(err)
            return False, 0
        else:
            _logger.info("%d sec, %s, %s" % ((end - begin).seconds, response['status'], response['content-location']))
            return response['status'] == '200', (end - begin).seconds

    def test_proxy_in_file(self, pfile):
        with open(pfile) as pfile:
            proxies = pfile.read().split('\n')
            for line in proxies:
                if len(line.strip()) == 0:
                    continue
                line = line.split()
                addr = line[0]
                port = int(line[1])
                user = ''
                passwd = ''
                if len(line) == 4:
                    user = line[2]
                    passwd = line[3]
                _logger.info("testing %s:%d, (%s:%s)" % (addr, port, user, passwd))
                perf = self.test_one_proxy(addr, port, user, passwd)
                if perf[0] >= 0.8 and perf[1] <= 5:
                    _logger.info("condidate %s:%d, (%s:%s), %.2f, %d" %
                                 (addr, port, user, passwd, perf[0], perf[1]))

    def test_all_proxy(self, write_to_db = False):
        self.update_db = write_to_db
        all_proxy = self.agent.get_all_proxy()
        _logger.info('found %d proxy in DB' % len(all_proxy))
        for proxy in all_proxy:
            addr = proxy['addr'].strip()
            port = proxy['port']
            user = proxy['user_name'].strip()
            passwd = proxy['password'].strip()
            ok_rate, avg_time = self.test_one_proxy(addr, port, user, passwd)
            if self.update_db:
                self.agent.update_proxy_status(proxy['id'], ok_rate, avg_time)


    def test_one_proxy(self, addr, port, user, passwd):
        urls = self._parse_url_file(self.test_url_path)
        _logger.info("using %d urls for test" % len(urls))
        _logger.info("trying proxy, addr=(%s:%d), %s:%s" % (addr, port, user, passwd))
        return self._test(addr, port, user, passwd, urls)

def usage():
    print 'usage: test_proxy -c (check-all|check-one|check-all-db|check-file) -h MYSQL_HOST [-i IP_ADDR -u USER -p PASSWD -o PORT] [-f PROXY-LIST]'
    sys.exit(0)

def main(argv):
    from getopt import getopt
    try:
        opts, args = getopt(argv, 'c:h:i:u:p:o:f:',
                            ['command=', 'mysql-host=', 'ip-addr=', 'user=', 'passwd=', 'port=', 'file='])
    except Exception, err:
        print "getopt error:%s" % err
        usage()
        sys.exit(2)
    
    command = ''
    host = 'localhost'
    ip_addr = ''
    port = 0
    user = ''
    passwd = ''
    pfile = ''
    for opt, arg in opts:
        if opt in ('-c', '--command'):
            command = arg.strip()
        if opt in ('-h', '--mysql-host'):
            host = arg.strip()
        if opt in ('-i', '--ip-addr'):
            ip_addr = arg.strip()
        if opt in ('-u', '--user'):
            user = arg.strip()
        if opt in ('-p', '--passwd'):
            passwd = arg.strip()
        if opt in ('-o', '--port'):
            port = int(arg.strip())
        if opt in ('-f', '--file'):
            pfile = arg.strip()

    checker = ProxyManager(host)

    if command == 'check-one':
        checker.test_one_proxy(ip_addr, port, user, passwd)
    elif command == 'check-all':
        checker.test_all_proxy(write_to_db = False)
    elif command == 'check-all-db':
        checker.test_all_proxy(write_to_db = True)
    elif command == 'check-file':
        checker.test_proxy_in_file(pfile)
    else:
        usage()

if __name__ == "__main__":
    main(sys.argv[1:])

