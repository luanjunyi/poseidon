#! /usr/bin/python
# -*- coding: utf-8 -*-
import sys, os, traceback
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../../') # Paracode root
from taras import taras
from util.log import _logger
from third_party.weibopy import auth as sina_auth
from third_party.weibopy import API as sina_api
from third_party.weibopy import WeibopError


def check_one_account(argv):
    daemon = taras.WeiboDaemon(noselenium=True)
    try:
        _logger.debug('%s:%s' % (argv[0], argv[1]))
        api = daemon.get_api_on_the_fly(argv[0], argv[1])
        print '很健康，她的昵称是 (%s)' % api.me().name.encode('utf-8')
    except Exception, err:
        print '这个的ID可能用不了: %s<br/>%s' % (err, traceback.format_exc())
    finally:
        daemon.shutdown()

def check_raw_account(taras, uname, passwd):
    return taras.get_api_on_the_fly(uname, passwd)

def check_from_file(infile):
    dae = taras.WeiboDaemon(noselenium=True)
    with open(infile) as account_file:
        accounts = account_file.read().split('\n')
        for account in accounts:
            account = account.strip()
            if len(account) == 0 or account[0] == '#':
                continue
            uname, passwd = account.split()
            _logger.debug('checking %s:%s' % (uname, passwd))
            try:
                api = check_raw_account(dae, uname, passwd)
                name = api.me().name
            except Exception, err:
                _logger.error("bad (%s:%s):%s" % (uname, passwd, err))
            else:
                _logger.info('good (%s:%s) %s' % (uname, passwd, name))
    dae.shutdown()

def check_all_accounts():
    daemon = taras.WeiboDaemon(noselenium=True, mysql_host="220.113.33.63")

    local_daemon = taras.WeiboDaemon(noselenium=True, mysql_host="192.168.1.200")

    for user in daemon.agent.get_all_user_including_disabled():
        try:
            api = daemon.get_api_by_user(user.uname)
            local_copy = local_daemon.agent.get_user_by_email(user.uname)
            if local_copy == None or not local_copy.enabled:
                _logger.debug('good: (%s:%s) %s' % (user.uname, user.passwd, api.me().name))
            else:
                _logger.debug('used: (%s:%s) %s' % (user.uname, user.passwd, api.me().name))
        except Exception, err:
            _logger.debug('bad: (%s, %s) %s' % (user.uname, user.passwd, err))
    daemon.shutdown()

if __name__ == "__main__":
    if sys.argv[1] == '--all':
        check_all_accounts()
    elif sys.argv[1] == '--from-file':
        check_from_file(sys.argv[2])
    else:
        check_one_account(sys.argv[1:])
