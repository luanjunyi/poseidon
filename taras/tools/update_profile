#! /usr/bin/python
# -*- coding: utf-8 -*-

import os, sys, re, time, cPickle
from datetime import datetime
from urlparse import urlparse
from random import choice
import json
import traceback

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../../')
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')

#import taras
from util import pbrowser
from util.log import _logger
import api_adapter
import sql_agent
#import taras.sdk.qqweibo.oauth as oauth

def usage():
    print 'usage: update_profile -i[USER_IDENTITY] -v[USER_PASSWD] -s[SCREEN_NAME] -d[DESCRIPTION] -a[AVATAR] -t[tags] -u[DBUSER] -p[DBPASSWD] -n[DBNAME] -h[DBADDR]'
    sys.exit(0)

def main(argv):
    from getopt import getopt
    try:
        opts, args = getopt(sys.argv[1:], 'i:v:s:d:a:t:u:p:n:h:',
                            ['identity=', 'user_verify=', 'screen_name=', 'desc=', 'avatar=', 'tags=', 'dbuser=', 'dbpass=', 'dbname=', 'dbaddr='])
    except Exception, err:
        print "getopt error:%s" % err
        usage()
        sys.exit(2)
        pass

    identity= ''
    desc = ''
    avatar= ''
    tags = ''
    screen_name = ''

    for opt, arg in opts:
        if opt in ('-u', '--dbuser'):
            db_user = arg.strip()
        if opt in ('-h', '--dbaddr'):
            db_addr = arg.strip()
        if opt in ('-p', '--dbpass'):
            db_passwd = arg.strip()
        if opt in ('-n', '--dbname'):
            db_name = arg.strip()
        if opt in ('-v', '--userpasswd'):
            user_passwd = arg.strip()
        if opt in ('-i', '--identity'):
            identity = arg.strip()
        if opt in ('-s', '--screen_name'):
            screen_name = arg.strip()
        if opt in ('-d', '--desc'):
            desc = arg.strip()
        if opt in ('-a', '--avatar'):
            avatar = arg.strip()
        if opt in ('-t', '--tags'):
            tags = arg.strip()

    if identity == '':
        usage()
    
    _logger.info('db_addr:%s, db_user:%s, dbpass:%s, identity:%s, screen_name:(%s), desc:(%s), tags:(%s), avatar:(%s)'
                 % (db_addr, db_user, db_passwd, identity, screen_name, desc, tags, avatar))
    try:
        agent = sql_agent.init(db_name, db_user, db_passwd, db_addr)
        agent.start()

        user_id = agent.local_user.find({'identity': identity}).id
        token = agent.app_auth_token.find({'user_id': user_id}).value
        token = cPickle.loads(token)

        app_id = agent.app_auth_token.find({'user_id': user_id}).app_id
        appkey = agent.local_app.find({'id':app_id}).token
        appsecret = agent.local_app.find({'id':app_id}).secret
        vender_type = agent.core_config.find({'name': 'vender-type'}).value

        QQapi = api_adapter.create_adapted_api(vender_type)
        api = QQapi(appkey, appsecret)
        api.api = api.create_api_from_token(token)
        '''mysql_connection = mdb.connect(db_addr, db_user, db_passwd, db_name)
        cursor = mysql_connection.cursor()
        get vender type
        cursor.execute('select value from core_config where name = "vender-type"')
        vender_type = cursor.fetchall()[0][0] 
        randomly get one app
        cursor.execute('select * from local_app order by rand() limit 1')
        app_info = cursor.fetchall()
        app_key = app_info[0][1]
        app_secret = app_info[0][2]
        mysql_connection.close()'''
        '''api = QQapi(app_key, app_secret)
        api.create_api_from_scratch(identity, user_passwd)'''
        '''update tag
        if tags != '':
            api.tag_create(tags)
         update screen name, description'''
        if screen_name != '':
            api.update_profile(screen_name=screen_name, description=desc)
            _logger.debug('screen name updated as (%s)' % api.me().name.encode('utf-8'))
        '''if desc != '':
            api.update_profile(description=desc)
            _logger.debug('description updated as (%s)' % api.me().description.encode('utf-8'))'''
            
        #update avatar
        if avatar != '':
            br = pbrowser.get_browser()
            # first visit the base url to get a good referer
            try:
                urlinfo = urlparse(avatar)
                baseurl = avatar[:avatar.find(urlinfo.path)]
                _logger.debug('avatar url parsed, baseurl:(%s)' % baseurl)
                br.open(baseurl)
            except Exception, err:
                _logger.error('getting referer failed:(%s), will continue anyway', err)
            img = br.download_image(avatar).read()
            # save to disk
            if not os.path.exists('temp_avatar_folder'):
                print 'temp folder not exist'
                os.makedirs('temp_avatar_folder')
                print 'show tmp'

            tmp_name = "temp_avatar_folder/tmp_avatar.%s%s" % (int(time.mktime(datetime.now().timetuple())),
                                            os.path.splitext(urlinfo.path)[1])
            with open(tmp_name, 'w') as tmp_img:
                tmp_img.write(img)
            api.update_profile_image(image = tmp_name)
            os.system('rm -f temp_avatar_folder/tmp_avatar.*')
        print json.dumps({"update_status": "update profile success"})
            
    except Exception, err:
        print '更新失败: %s' % traceback.format_exc()
        #update_error = '更新失败: %s' % traceback.format_exc()
        #print json.dumps({"error": str(err), "update_status": "update profile failed"})

if __name__ == "__main__":
    main(sys.argv[1:])
